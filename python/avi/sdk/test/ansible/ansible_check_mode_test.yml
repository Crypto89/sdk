---
- hosts: localhost
  connection: local
  vars:
    controller: "{{ controller }}"
    username: "{{ username }}"
    password: "{{ password }}"
    pool_name: "{{ pool_name }}"
    dontskip: "{{ dontskip }}"
  tasks:
    - name: Create or update Pool using post
      avi_api_session:
        controller: "{{ controller }}"
        username: "{{ username }}"
        api_version: "{{api_version}}"
        password: "{{ password }}"
        tenant: admin
        path: pool
        http_method: post
        data:
          name: "{{ pool_name }}"
      register: result
    - name: Failure when pool "{{ pool_name }}" is not created
      fail: msg=pool
      when: result.changed == false
    - name: Create or update Pool using put
      avi_api_session:
        controller: "{{ controller }}"
        username: "{{ username }}"
        password: "{{ password }}"
        api_version: "{{api_version}}"
        tenant: admin
        path: pool
        http_method: put
        data:
          name: testpool
      register: testpool
    - name: set pool path
      set_fact:
        pool_path: "pool/{{testpool.obj['uuid']}}"
      when: "{{ dontskip }}"
    - name: print pool path
      debug:
        msg: "{{ pool_path}}"
      when: "{{ dontskip }}"

    - name: Updated servers
      avi_api_session:
        controller: "{{ controller }}"
        username: "{{ username }}"
        password: "{{ password }}"
        api_version: "{{api_version}}"
        http_method: patch
        path: "{{ pool_path }}"
        data:
          add:
            servers:
              - ip:
                  addr: 10.10.10.10
                  type: V4
              - ip:
                  addr: 20.20.20.20
                  type: V4
      register: updated_pool

    - avi_virtualservice:
        controller: 10.10.25.42
        api_version: "{{api_version}}"
        username: admin
        password: avi123
        name: testvs
        state: present
        services:
           - port: 80
        #pool_ref: '/api/pool?name=testpool'
        performance_limits:
           max_concurrent_connections: 1000
           #state: absent
        vip:
          - ip_address:
              addr: 10.90.114.202
              type: V4
            vip_id: 0
      register: testvs
      when: false
    - name: print test pool
      debug:
        var: updated_pool
      when: "{{ dontskip }}"
    - name: Pool test
      avi_pool:
        controller: "{{ controller }}"
        username: "{{ username }}"
        password: "{{ password }}"
        api_version: "{{api_version}}"
        name: testpool2
        #lb_algorithm: LB_ALGORITHM_LEAST_CONNECTIONS
        lb_algorithm: LB_ALGORITHM_ROUND_ROBIN

    - name: Test int to float conversion in analytics profile
      avi_analyticsprofile:
        controller: "{{ controller }}"
        username: "{{ username }}"
        password: "{{ password }}"
        api_version: "{{api_version}}"
        name: testanalyticsprofile
        apdex_response_tolerated_factor: 41

    - name: Test check mode for Pool
      avi_pool:
        controller: "{{ controller }}"
        username: "{{ username }}"
        password: "{{ password }}"
        api_version: "{{api_version}}"
        name: testpool2
        lb_algorithm: LB_ALGORITHM_LEAST_CONNECTIONS
        #lb_algorithm: LB_ALGORITHM_ROUND_ROBIN
      check_mode: true

    - name: Test check mode delete of existing object
      avi_pool:
        controller: "{{ controller }}"
        username: "{{ username }}"
        password: "{{ password }}"
        api_version: "{{api_version}}"
        name: testpool2
        state: absent
        lb_algorithm: LB_ALGORITHM_LEAST_CONNECTIONS
        #lb_algorithm: LB_ALGORITHM_ROUND_ROBIN
      check_mode: true

    - name: Test check mode delete of non existing object
      avi_pool:
        controller: "{{ controller }}"
        username: "{{ username }}"
        password: "{{ password }}"
        api_version: "{{api_version}}"
        name: doesnotexist
        state: absent
        lb_algorithm: LB_ALGORITHM_LEAST_CONNECTIONS
        #lb_algorithm: LB_ALGORITHM_ROUND_ROBIN
      check_mode: true

    - name: Test check mode creationg of new pool object
      avi_pool:
        controller: "{{ controller }}"
        username: "{{ username }}"
        password: "{{ password }}"
        api_version: "{{api_version}}"
        name: doesnotexist
        lb_algorithm: LB_ALGORITHM_LEAST_CONNECTIONS
        #lb_algorithm: LB_ALGORITHM_ROUND_ROBIN
      check_mode: true
    - block:
       - avi_pool:
          controller: "{{ controller }}"
          username: "{{ username }}"
          password: "{{ password }}"
          api_version: "{{api_version}}"
          name: "{{ pool_name }}"
          description: test pool
          state: "{{ state }}"
          health_monitor_refs:
           - '/api/healthmonitor?name=System-HTTP'
          servers:
            - ip:
                addr: 10.10.2.20
                type: V4
            - ip:
                addr: 10.10.2.21
                type: V4
         register: mypool
       - fail:
            msg: pool "{{ pool_name }}" creation failed
         when:
           - "'uuid' not in mypool.obj"
       - avi_api_session:
          # get pool information
          controller: "{{ controller }}"
          username: "{{ username }}"
          password: "{{ password }}"
          api_version: "{{api_version}}"
          http_method: get
          path: "pool/{{ mypool.obj.uuid }}"
         register: rsp
       - fail: msg="pool {{ pool_name }} present"
         when:
          - "'uuid' not in rsp.obj"
      when: state == "present"