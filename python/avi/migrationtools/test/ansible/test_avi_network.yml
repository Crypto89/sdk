---
- hosts: localhost
  connection: local

  vars:
   avi_credentials:
    controller: "{{ lookup('env', 'AVI_CONTROLLER') }}"
    username: "{{ lookup('env', 'AVI_USERNAME') }}"
    password: "{{ lookup('env', 'AVI_PASSWORD') }}"
    api_version: "{{ lookup('env', 'API_VERSION') }}"

  roles:
    - role: avinetworks.avisdk
  tasks:
    - block:
      - name: create network object
        avi_network:
          username: "{{avi_credentials.username}}"
          password: "{{avi_credentials.password}}"
          controller: "{{avi_credentials.controller}}"
          api_version: "{{avi_credentials.api_version}}"
          state: 'present'
          name: test-network
          synced_from_se: false
          tenant_ref: '/api/tenant?name=admin'
          exclude_discovered_subnets: true
          dhcp_enabled: true
        register: result

      - name: update network object using put method
        avi_network:
          username: "{{avi_credentials.username}}"
          password: "{{avi_credentials.password}}"
          controller: "{{avi_credentials.controller}}"
          api_version: "{{avi_credentials.api_version}}"
          avi_api_update_method: put
          #avi_api_patch_op: replace
          name: updated-network
          synced_from_se: false
          tenant_ref: '/api/tenant?name=admin'
          exclude_discovered_subnets: true
          dhcp_enabled: false
          uuid: "{{result.obj.uuid}}"

      - name: delete network object
        avi_network:
          username: "{{avi_credentials.username}}"
          password: "{{avi_credentials.password}}"
          controller: "{{avi_credentials.controller}}"
          api_version: "{{avi_credentials.api_version}}"
          state: 'absent'
          name: updated-network
          uuid: "{{result.obj.uuid}}"