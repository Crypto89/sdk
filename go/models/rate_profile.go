package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// RateProfile rate profile
// swagger:model RateProfile
type RateProfile struct {

	// Action to perform upon rate limiting.
	Action *RateLimiterAction `json:"action,omitempty"`

	// Maximum number of connections or requests or packets to be let through instantaneously. Allowed values are 10-2500. Special values are 0- 'automatic'.
	BurstSz int32 `json:"burst_sz,omitempty"`

	// Maximum number of connections or requests or packets. Allowed values are 10-2500. Special values are 0- 'unlimited'.
	Count int32 `json:"count,omitempty"`

	// Explicitly tracks an attacker across rate periods.
	ExplicitTracking bool `json:"explicit_tracking,omitempty"`

	// Enable fine granularity.
	FineGrain bool `json:"fine_grain,omitempty"`

	// HTTP cookie name. Field introduced in 17.1.1.
	HTTPCookie string `json:"http_cookie,omitempty"`

	// HTTP header name. Field introduced in 17.1.1.
	HTTPHeader string `json:"http_header,omitempty"`

	// Time value in seconds to enforce rate count. Allowed values are 1-300.
	Period *int32 `json:"period,omitempty"`
}

// Validate validates this rate profile
func (m *RateProfile) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAction(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RateProfile) validateAction(formats strfmt.Registry) error {

	if swag.IsZero(m.Action) { // not required
		return nil
	}

	if m.Action != nil {

		if err := m.Action.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("action")
			}
			return err
		}
	}

	return nil
}
