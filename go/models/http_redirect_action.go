package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HTTPRedirectAction HTTP redirect action
// swagger:model HTTPRedirectAction
type HTTPRedirectAction struct {

	// Host config.
	Host *URIParam `json:"host,omitempty"`

	// Keep or drop the query of the incoming request URI in the redirected URI.
	KeepQuery *bool `json:"keep_query,omitempty"`

	// Path config.
	Path *URIParam `json:"path,omitempty"`

	// Port to which redirect the request. Allowed values are 1-65535.
	Port int32 `json:"port,omitempty"`

	// Protocol type. Enum options - HTTP, HTTPS.
	// Required: true
	Protocol *string `json:"protocol"`

	// HTTP redirect status code. Enum options - HTTP_REDIRECT_STATUS_CODE_301, HTTP_REDIRECT_STATUS_CODE_302, HTTP_REDIRECT_STATUS_CODE_307.
	StatusCode *string `json:"status_code,omitempty"`
}

// Validate validates this HTTP redirect action
func (m *HTTPRedirectAction) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHost(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePath(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateProtocol(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HTTPRedirectAction) validateHost(formats strfmt.Registry) error {

	if swag.IsZero(m.Host) { // not required
		return nil
	}

	if m.Host != nil {

		if err := m.Host.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("host")
			}
			return err
		}
	}

	return nil
}

func (m *HTTPRedirectAction) validatePath(formats strfmt.Registry) error {

	if swag.IsZero(m.Path) { // not required
		return nil
	}

	if m.Path != nil {

		if err := m.Path.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("path")
			}
			return err
		}
	}

	return nil
}

func (m *HTTPRedirectAction) validateProtocol(formats strfmt.Registry) error {

	if err := validate.Required("protocol", "body", m.Protocol); err != nil {
		return err
	}

	return nil
}
