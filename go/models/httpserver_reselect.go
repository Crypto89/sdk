package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HttpserverReselect httpserver reselect
// swagger:model HTTPServerReselect
type HttpserverReselect struct {

	// Enable HTTP request reselect when server responds with specific response codes.
	// Required: true
	Enabled *bool `json:"enabled"`

	// Number of times to retry an HTTP request when server responds with configured status codes.
	NumRetries *int32 `json:"num_retries,omitempty"`

	// Allow retry of non-idempotent HTTP requests.
	RetryNonidempotent bool `json:"retry_nonidempotent,omitempty"`

	// Server response codes which will trigger an HTTP request retry.
	SvrRespCode *HTTPReselectRespCode `json:"svr_resp_code,omitempty"`
}

// Validate validates this httpserver reselect
func (m *HttpserverReselect) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnabled(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSvrRespCode(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HttpserverReselect) validateEnabled(formats strfmt.Registry) error {

	if err := validate.Required("enabled", "body", m.Enabled); err != nil {
		return err
	}

	return nil
}

func (m *HttpserverReselect) validateSvrRespCode(formats strfmt.Registry) error {

	if swag.IsZero(m.SvrRespCode) { // not required
		return nil
	}

	if m.SvrRespCode != nil {

		if err := m.SvrRespCode.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("svr_resp_code")
			}
			return err
		}
	}

	return nil
}
