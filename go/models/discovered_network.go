package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DiscoveredNetwork discovered network
// swagger:model DiscoveredNetwork
type DiscoveredNetwork struct {

	// Discovered network for this IP. It is a reference to an object of type Network.
	// Required: true
	NetworkRef *string `json:"network_ref"`

	// Discovered subnet for this IP.
	Subnet []*IPAddrPrefix `json:"subnet,omitempty"`
}

// Validate validates this discovered network
func (m *DiscoveredNetwork) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNetworkRef(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSubnet(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DiscoveredNetwork) validateNetworkRef(formats strfmt.Registry) error {

	if err := validate.Required("network_ref", "body", m.NetworkRef); err != nil {
		return err
	}

	return nil
}

func (m *DiscoveredNetwork) validateSubnet(formats strfmt.Registry) error {

	if swag.IsZero(m.Subnet) { // not required
		return nil
	}

	for i := 0; i < len(m.Subnet); i++ {

		if swag.IsZero(m.Subnet[i]) { // not required
			continue
		}

		if m.Subnet[i] != nil {

			if err := m.Subnet[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("subnet" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}
