package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FailAction fail action
// swagger:model FailAction
type FailAction struct {

	// Backup Pool when pool experiences a failure.
	BackupPool *FailActionBackupPool `json:"backup_pool,omitempty"`

	// Local response to HTTP requests when pool experiences a failure.
	LocalRsp *FailActionHTTPLocalResponse `json:"local_rsp,omitempty"`

	// URL to redirect HTTP requests to when pool experiences a failure.
	Redirect *FailActionHTTPRedirect `json:"redirect,omitempty"`

	// Enables a response to client when pool experiences a failure. By default TCP connection is closed. Enum options - FAIL_ACTION_HTTP_REDIRECT, FAIL_ACTION_HTTP_LOCAL_RSP, FAIL_ACTION_CLOSE_CONN, FAIL_ACTION_BACKUP_POOL.
	// Required: true
	Type *string `json:"type"`
}

// Validate validates this fail action
func (m *FailAction) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBackupPool(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLocalRsp(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRedirect(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FailAction) validateBackupPool(formats strfmt.Registry) error {

	if swag.IsZero(m.BackupPool) { // not required
		return nil
	}

	if m.BackupPool != nil {

		if err := m.BackupPool.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backup_pool")
			}
			return err
		}
	}

	return nil
}

func (m *FailAction) validateLocalRsp(formats strfmt.Registry) error {

	if swag.IsZero(m.LocalRsp) { // not required
		return nil
	}

	if m.LocalRsp != nil {

		if err := m.LocalRsp.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("local_rsp")
			}
			return err
		}
	}

	return nil
}

func (m *FailAction) validateRedirect(formats strfmt.Registry) error {

	if swag.IsZero(m.Redirect) { // not required
		return nil
	}

	if m.Redirect != nil {

		if err := m.Redirect.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("redirect")
			}
			return err
		}
	}

	return nil
}

func (m *FailAction) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}
