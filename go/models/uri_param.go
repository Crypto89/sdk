package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// URIParam URI param
// swagger:model URIParam
type URIParam struct {

	// Token config either for the URI components or a constant string.
	Tokens []*URIParamToken `json:"tokens,omitempty"`

	// URI param type. Enum options - URI_PARAM_TYPE_TOKENIZED.
	// Required: true
	Type *string `json:"type"`
}

// Validate validates this URI param
func (m *URIParam) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTokens(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *URIParam) validateTokens(formats strfmt.Registry) error {

	if swag.IsZero(m.Tokens) { // not required
		return nil
	}

	for i := 0; i < len(m.Tokens); i++ {

		if swag.IsZero(m.Tokens[i]) { // not required
			continue
		}

		if m.Tokens[i] != nil {

			if err := m.Tokens[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tokens" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *URIParam) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}
