package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// HTTPReselectRespCode HTTP reselect resp code
// swagger:model HTTPReselectRespCode
type HTTPReselectRespCode struct {

	// HTTP response code to be matched. Allowed values are 400-599.
	Codes []int64 `json:"codes,omitempty"`

	// HTTP response code ranges to match.
	Ranges []*HttpstatusRange `json:"ranges,omitempty"`

	// Block of HTTP response codes to match for server reselect. Enum options - HTTP_RSP_4XX, HTTP_RSP_5XX.
	RespCodeBlock []string `json:"resp_code_block,omitempty"`
}

// Validate validates this HTTP reselect resp code
func (m *HTTPReselectRespCode) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCodes(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRanges(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRespCodeBlock(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HTTPReselectRespCode) validateCodes(formats strfmt.Registry) error {

	if swag.IsZero(m.Codes) { // not required
		return nil
	}

	return nil
}

func (m *HTTPReselectRespCode) validateRanges(formats strfmt.Registry) error {

	if swag.IsZero(m.Ranges) { // not required
		return nil
	}

	for i := 0; i < len(m.Ranges); i++ {

		if swag.IsZero(m.Ranges[i]) { // not required
			continue
		}

		if m.Ranges[i] != nil {

			if err := m.Ranges[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ranges" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *HTTPReselectRespCode) validateRespCodeBlock(formats strfmt.Registry) error {

	if swag.IsZero(m.RespCodeBlock) { // not required
		return nil
	}

	return nil
}
